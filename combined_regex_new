DECLARE
    TYPE t_failed_table IS RECORD (
        owner       VARCHAR2(128),
        table_name  VARCHAR2(128)
    );
    TYPE t_failed_list IS TABLE OF t_failed_table INDEX BY PLS_INTEGER;
    v_failed_tables      t_failed_list;

    v_sql               VARCHAR2(1000);
    v_value             VARCHAR2(4000);
    v_cur               INTEGER;
    v_status            INTEGER;
    v_owner             ALL_TAB_COLUMNS.OWNER%TYPE;
    v_table             ALL_TAB_COLUMNS.TABLE_NAME%TYPE;
    v_column            ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;

    v_total_tables          INTEGER := 0;
    v_successful_checks     INTEGER := 0;
    v_failed_checks         INTEGER := 0;
    v_tables_with_match     INTEGER := 0;
    v_tables_without_match  INTEGER := 0;
    v_match_found           BOOLEAN;
    v_table_failed          BOOLEAN;
    v_failed_idx            INTEGER := 0;
    v_match_type            VARCHAR2(50);

BEGIN
    FOR t IN (
        SELECT DISTINCT OWNER, TABLE_NAME
        FROM ALL_TABLES
        WHERE OWNER NOT IN (
            'SYS', 'SYSTEM', 'XDB', 'ORDSYS', 'CTXSYS', 'DBSNMP', 'OUTLN',
            'ORDDATA', 'ORDPLUGINS', 'SI_INFORMTN_SCHEMA', 'MDSYS', 'OLAPSYS',
            'WMSYS', 'EXFSYS', 'SYSMAN', 'FLOWS_FILES', 'APEX_PUBLIC_USER',
            'ANONYMOUS', 'DVSYS', 'GSMADMIN_INTERNAL', 'LBACSYS'
        )
    ) LOOP
        v_owner := t.OWNER;
        v_table := t.TABLE_NAME;
        v_total_tables := v_total_tables + 1;
        v_table_failed := FALSE;
        v_match_found := FALSE;

        BEGIN
            FOR c IN (
                SELECT COLUMN_NAME
                FROM ALL_TAB_COLUMNS
                WHERE OWNER = v_owner AND TABLE_NAME = v_table
            ) LOOP
                v_column := c.COLUMN_NAME;

                BEGIN
                    v_sql := 'SELECT TO_CHAR("' || v_column || '") FROM "' || v_owner || '"."' || v_table || '" WHERE ROWNUM <= 5';

                    v_cur := DBMS_SQL.OPEN_CURSOR;
                    DBMS_SQL.PARSE(v_cur, v_sql, DBMS_SQL.NATIVE);
                    DBMS_SQL.DEFINE_COLUMN(v_cur, 1, v_value, 4000);
                    v_status := DBMS_SQL.EXECUTE(v_cur);

                    WHILE DBMS_SQL.FETCH_ROWS(v_cur) > 0 LOOP
                        DBMS_SQL.COLUMN_VALUE(v_cur, 1, v_value);

    IF REGEXP_LIKE(v_value, '^[A-Z]{2}[0-9]{2}[-[:space:]]?[0-9]{4}[0-9]{7}$') THEN
        v_match_type := 'DL';

    ELSIF REGEXP_LIKE(v_value, '^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][A-Z0-9]Z[A-Z0-9]$') THEN
        v_match_type := 'GSTIN';

    ELSIF REGEXP_LIKE(v_value, '\b(([0-9]{1,3}\.){3}[0-9]{1,3})\b') THEN
        v_match_type := 'IP';

    ELSIF REGEXP_LIKE(v_value, '((([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2})|(([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}))') THEN
        v_match_type := 'MAC';

    ELSIF REGEXP_LIKE(v_value, '(-?[0-9]{1,3}\.[0-9]+,\s*-?[0-9]{1,3}\.[0-9]+)') THEN
        v_match_type := 'COORD';

    ELSIF REGEXP_LIKE(v_value, '[A-Za-z0-9._%+-]+@([A-Za-z0-9-]+\.)+[A-Za-z]{2,}') THEN
        v_match_type := 'EMAIL';

    ELSIF REGEXP_LIKE(v_value, '(0|[+]?91)?[ -]?[6-9][0-9]{9}') THEN
        v_match_type := 'MOBILE';

    ELSIF REGEXP_LIKE(v_value, '[A-Z]{5}[0-9]{4}[A-Z]{1}') THEN
        v_match_type := 'PAN';

    ELSIF REGEXP_LIKE(v_value, '[A-Za-z0-9.\-_]{2,256}@[A-Za-z]{2,64}') THEN
        v_match_type := 'UPI';

    ELSIF REGEXP_LIKE(v_value, '[A-Z]{3}[0-9]{7}') THEN
        v_match_type := 'VOTERID';

    ELSE
        v_match_type := NULL;
    END IF;

    IF v_match_type IS NOT NULL THEN
        IF NOT (v_value LIKE '0%' OR v_value LIKE '1%' OR v_value LIKE '91%') THEN
            DBMS_OUTPUT.PUT_LINE(v_owner || ',' || v_table || ',found,' || v_column || ',' || v_match_type || ',' || v_value);
            v_match_found := TRUE;
        END IF;
    END IF;
END;

                    DBMS_SQL.CLOSE_CURSOR(v_cur);
                EXCEPTION
                    WHEN OTHERS THEN
                        IF DBMS_SQL.IS_OPEN(v_cur) THEN
                            DBMS_SQL.CLOSE_CURSOR(v_cur);
                        END IF;
                        v_table_failed := TRUE;
                        EXIT;
                END;
            END LOOP;

            IF v_table_failed THEN
                DBMS_OUTPUT.PUT_LINE(v_owner || ',' || v_table || ',requires manual');
                v_failed_checks := v_failed_checks + 1;
                v_failed_idx := v_failed_idx + 1;
                v_failed_tables(v_failed_idx).owner := v_owner;
                v_failed_tables(v_failed_idx).table_name := v_table;
            ELSIF v_match_found THEN
                v_successful_checks := v_successful_checks + 1;
                v_tables_with_match := v_tables_with_match + 1;
            ELSE
                DBMS_OUTPUT.PUT_LINE(v_owner || ',' || v_table || ',not found');
                v_successful_checks := v_successful_checks + 1;
                v_tables_without_match := v_tables_without_match + 1;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(v_owner || ',' || v_table || ',requires manual');
                v_failed_checks := v_failed_checks + 1;
                v_failed_idx := v_failed_idx + 1;
                v_failed_tables(v_failed_idx).owner := v_owner;
                v_failed_tables(v_failed_idx).table_name := v_table;
        END;
    END LOOP;

    -- Final summary
    DBMS_OUTPUT.PUT_LINE('========================================');
    DBMS_OUTPUT.PUT_LINE('Total Tables Found,' || v_total_tables);
    DBMS_OUTPUT.PUT_LINE('Successfully Checked,' || v_successful_checks);
    DBMS_OUTPUT.PUT_LINE('Tables with Matches,' || v_tables_with_match);
    DBMS_OUTPUT.PUT_LINE('Tables with No Matches,' || v_tables_without_match);
    DBMS_OUTPUT.PUT_LINE('Failed Checks (manual),' || v_failed_checks);
    DBMS_OUTPUT.PUT_LINE('========================================');

END;
/
